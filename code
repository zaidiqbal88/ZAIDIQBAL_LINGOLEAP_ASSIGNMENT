ASSIGNMENT SOLUTION :   
#include <vector>  
#include <queue>  
using namespace std;  
class Solution {  
public:  
    int maxMoves(vector<vector<int>>& grid) {  
        int m = grid.size();  
        int n = grid[0].size();  
        vector<vector<int>> moves(m, vector<int>(n, 0));  
        int maxMoves = 0;  
        vector<int> dr = {-1, 0, 1};  
        vector<int> dc = {1, 1, 1};  
        for (int i = 0; i < m; i++) {  
            queue<pair<int, int>> q;  
            q.push({i, 0});   
            while (!q.empty()) {  
                int r = q.front().first;  
                int c = q.front().second;  
                q.pop();   
                for (int k = 0; k < 3; k++) {  
                    int newRow = r + dr[k];  
                    int newCol = c + dc[k];  
  
                    if (newRow >= 0 && newRow < m && newCol < n && grid[newRow][newCol] > grid[r][c]) {  
                        if (moves[newRow][newCol] < moves[r][c] + 1) {  
                            moves[newRow][newCol] = moves[r][c] + 1;  
                            maxMoves = max(maxMoves, moves[newRow][newCol]);  
                            q.push({newRow, newCol});  
                        }  
                    }  
                }  
            }  
        }   
        return maxMoves;  
    }  
};    
/* WORKING OF THE CODE:  
Here in this code I  used  Breadth-First Search (BFS) to find the maximum moves starting from any cell in the first column.   
It explores cells in the grid, considering only those with larger values  and  updates a 2D array moves to store the maximum moves to reach each cell and returns the maximum moves found in the grid. 
*/ 
SUBMITTED BY: 
ZAID IQBAL 
Persuing B.TECH (CSE) 
2020-2024 
CONTACT NUMBER: 7070397689 
E-MAIL:  zaidiqbaliqbal28@gmail.com 
   zaid.iqbal.562@gmail.com 
 
